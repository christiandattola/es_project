#ifndef FEEDBACKREQUESTEVENT_H
#define FEEDBACKREQUESTEVENT_H

#include "baseevent.h"
#include "../namespaces.h"
#include <iomanip>
#include <sys/types.h>
#include <unistd.h>

using namespace std;

namespace rmcommon {

/*!
 * \class event asynchronously generated by an integrated application.
 * This type of event is used by integrated applications to provide a
 * feedback to Konro regarding their QoS.
 * It's also possibile to send feedbacks for standalone applications
 * by using the Konro shell.
 */
class FeedbackRequestEvent : public BaseEvent {

    /*! The application sending the feedback */
    pid_t pid_;

    /*! The PID namespace to which the application belongs.
        If 0, the application belongs to Konro's namespace. */
    namespace_t ns_;

    /*! The feedback value */
    int feedback_;

public:
    FeedbackRequestEvent(pid_t pid, namespace_t ns, int feedback) :
        BaseEvent("FeedbackRequestEvent"),
        pid_(pid),
        ns_(ns),
        feedback_(feedback)
    {}

    pid_t getPid() const noexcept {
        return pid_;
    }

    namespace_t getPidNamespace() const noexcept {
        return ns_;
    }

    int getFeedback() const noexcept {
        return feedback_;
    }

    void printOnOstream(std::ostream &os) const override {
        ios_base::fmtflags f = os.flags();
        os.flags(f | ios_base::boolalpha);
        os << "{"
           << "\"pid\":" << pid_
           << ",\"namespace\":" << ns_
           << ",\"feedback\":" << feedback_
           << "}";
        os.flags(f);
    }
};

} // namespace rmcommon

#endif // FEEDBACKREQUESTEVENT_H
